<!DOCTYPE html>
<html>

<div id="Welcome Mentor" style.display="none">Hello Mentor</div>
<div id="Welcome Student" style.display="none">Hello Student</div>

<head>
  <title>Code Block Details</title>
  <!-- Add the Highlight.js library -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/highlight.min.js"></script>

  <!-- Add the desired CSS theme for syntax highlighting -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/styles/default.min.css" rel="stylesheet">

</head>

<script>
  if (<%= isFirst %>) {
    document.getElementById('Welcome Mentor').style.display = 'block';
    document.getElementById('Welcome Student').style.display = 'none';
  } else {
    document.getElementById('Welcome Student').style.display = 'block';
    document.getElementById('Welcome Mentor').style.display = 'none';
  }
</script>

<body>
  <h1>Code Block Details</h1>
  <div id="code-block">
    <h2>
      <%= codeBlock.title %>
    </h2>
    <pre>
    <code id="codeArea" rows="10" cols="80" contenteditable="true">
      <%= codeBlock.code %>
    </code>
  </pre>

    <!-- <button id="Highlight">Please press to highlight code block</button> -->

    <script>
      hljs.highlightElement(document.getElementById("codeArea"), { language: "javascript" });
    </script>

    <script>
      // If isFirst, make the codeArea readonly
      if (<%= isFirst %>) {
        const codeArea = document.getElementById('codeArea');
        codeArea.setAttribute('contenteditable', false);
      }

      // WebSocket connection
      const socket = new WebSocket('ws://' + window.location.host);

      codeArea = document.getElementById('codeArea');

      // Utility function to get the caret position (offset) and node number
      function getoffsetAndNodeNumber() {
        const selection = document.getSelection();
        const node = selection.anchorNode;
        let offset = selection.anchorOffset;
        let nodeNumber = 0;

        if (node && node.nodeType === Node.TEXT_NODE) {
          nodeNumber = [...codeArea.childNodes].indexOf(node);
          for (let i = 0; i < nodeNumber; i++) {
            const sibling = codeArea.childNodes[i];
            if (sibling.nodeType === Node.TEXT_NODE) {
              offset += sibling.textContent.length;
            }
          }
        }

        return { offset, nodeNumber };
      }

      let typingTimer;
      const doneTypingInterval = 2000; // Adjust the time interval in milliseconds (3 second in this example)

      function doneTyping() {
        hljs.highlightElement(codeArea, { language: "javascript" });
      }

      function resetTypingTimer() {
        clearTimeout(typingTimer);
        typingTimer = setTimeout(doneTyping, doneTypingInterval);
      }

      // Listen for changes to the code
      codeArea.addEventListener('input', (event) => {
        let { offset, nodeNumber } = getoffsetAndNodeNumber();
        // Send to the second user
        socket.send(JSON.stringify({ innerText: codeArea.innerText, offset: offset, nodeNumber: nodeNumber }));
        resetTypingTimer();
      });

      function setOffsetWithinRange(textNode, offset) {
        if (offset > textNode.length) {
          const nextSibling = textNode.nextSibling;
          if (nextSibling && nextSibling.nodeType === Node.TEXT_NODE) {
            // Move to the next sibling node and adjust the offset
            return setOffsetWithinRange(nextSibling, offset - textNode.length);
          } else {
            // If there is no next sibling text node, set the offset to the end of the current node
            return textNode.length;
          }
        }
        return offset;
      }

      // code change message from server
      socket.addEventListener('message', (event) => {
        const parsed = JSON.parse(event.data);
        // Update the code in the first user's screen
        const codeArea = document.getElementById('codeArea');
        codeArea.innerText = parsed.innerText;
        var solution = <%- JSON.stringify(codeBlock.solution) %>;
        if (parsed.innerText == solution) {
          alert('\uD83D\uDE03'); // Unicode for smiling face emoji
        }
        if (<%= isFirst %>) {
        hljs.highlightElement(codeArea, { language: "javascript" });
      }else {
        console.log(parsed.offset);
        console.log(parsed.nodeNumber)
        console.log(parsed.innerText)

        const textNode = codeArea.childNodes[parsed.nodeNumber];

        // Ensure the offset is within the valid range
        const offset = setOffsetWithinRange(textNode, parsed.offset);

        const selection = document.getSelection();
        selection.removeAllRanges(); // Clear any existing selection
        const range = document.createRange();
        range.setStart(textNode, offset);
        selection.addRange(range);
      }
    
      });
    
    </script>
  </div>
</body>

</html>